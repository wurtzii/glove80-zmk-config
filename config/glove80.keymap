/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        toGamingLayer {
            bindings = <&tog 3>;
            key-positions = <64 79>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&trans    &trans  &trans      &trans         &trans                                                                                                  &kp C_MUTE     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans    &trans
&trans    &trans  &trans      &trans         &trans        &trans                                                                            &trans  &trans         &trans             &trans           &trans    &trans
&kp TAB   &kp Q   &kp W       &kp F          &kp P         &kp B                                                                             &kp J   &kp L          &kp U              &kp Y            &kp SEMI  &trans
&kp ESC   &kp A   &kp R       &kp S          &kp T         &kp G                                                                             &kp M   &kp N          &kp E              &kp I            &kp O     &trans
&kp LALT  &kp X   &kp C       &kp D          &kp V         &kp Z   &kp LEFT_CONTROL  &trans     &trans    &trans  &trans     &kp LEFT_SHIFT  &kp K   &kp H          &kp COMMA          &kp DOT          &kp FSLH  &kp LALT
&trans    &trans  &kp DELETE  &kp BACKSPACE  &kp LEFT_GUI          &mo 1             &kp SPACE  &trans    &trans  &kp ENTER  &mo 2                   &kp RIGHT_GUI  &mo 3              &mo 5            &trans    &trans
            >;
        };

        number_pad {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                      &trans    &trans  &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans    &trans    &trans  &trans         &trans  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans                                                    &trans    &trans    &trans  &trans         &trans  &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &trans                                                    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT      &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &trans    &trans  &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans            &trans    &trans  &kp BACKSPACE  &trans  &trans
            >;
        };

        symbol_layer {
            bindings = <
&trans  &trans             &trans           &trans       &trans                                                                          &trans        &trans        &trans         &trans            &trans
&trans  &trans             &trans           &trans       &trans     &trans                                                       &trans  &trans        &trans        &trans         &trans            &trans
&trans  &kp BACKSLASH      &kp AMPERSAND    &kp STAR     &kp SQT    &kp TILDE                                                    &trans  &kp LBKT      &kp RBKT      &kp UNDER      &kp EQUAL         &trans
&trans  &kp DOUBLE_QUOTES  &kp DOLLAR       &kp PERCENT  &kp CARET  &kp PIPE                                                     &trans  &kp LS(LBRC)  &kp LS(RBRC)  &kp MINUS      &kp PLUS          &trans
&trans  &trans             &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp GRAVE  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &kp LESS_THAN  &kp GREATER_THAN  &trans
&trans  &trans             &trans           &trans       &trans                &trans  &trans  &trans    &trans  &trans  &trans          &trans        &trans        &trans         &trans            &trans
            >;
        };

        function_layer {
            bindings = <
&trans  &trans   &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans  &trans  &trans    &trans  &trans  &mo 4   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        tty_layer {
            bindings = <
&trans  &trans           &trans          &trans          &trans                                                                            &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans          &trans          &trans          &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(LC(F12))  &kp LA(LC(F7))  &kp LA(LC(F8))  &kp LA(LC(F9))  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(LC(F11))  &kp LA(LC(F4))  &kp LA(LC(F5))  &kp LA(LC(F6))  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(LC(F10))  &kp LA(LC(F1))  &kp LA(LC(F2))  &kp LA(LC(F3))  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans          &trans          &trans                  &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        keeb_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans           &trans                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &rgb_ug RGB_TOG  &trans                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 4  &trans        &trans           &trans                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &trans  &trans  &bootloader  &trans    &trans  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans                   &trans  &bt BT_CLR   &trans    &trans  &bt BT_CLR   &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        gaming_layer {
            bindings = <
&trans     &trans  &trans  &trans  &trans                                                                          &trans    &trans        &trans     &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans                                                          &trans  &trans    &trans        &trans     &trans  &trans
&kp TAB    &kp Q   &kp N   &kp E   &kp R   &kp T                                                           &trans  &trans    &trans        &trans     &trans  &trans
&kp LSHFT  &kp C   &kp A   &kp W   &kp D   &kp F                                                           &trans  &kp LEFT  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&kp ESC    &kp Z   &kp X   &kp S   &kp V   &kp B   &kp LCTRL  &trans     &trans    &trans  &trans  &trans  &trans  &trans    &kp DOWN      &trans     &trans  &trans
&trans     &trans  &trans  &trans  &trans          &mo 2      &kp SPACE  &trans    &trans  &trans  &trans          &trans    &trans        &trans     &trans  &trans
            >;
        };
    };
};
